# üåÄ Recoil trong ReactJS

## üìå Gi·ªõi thi·ªáu

**Recoil** l√† m·ªôt th∆∞ vi·ªán qu·∫£n l√Ω state d√†nh cho React, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Facebook. M·ª•c ti√™u ch√≠nh c·ªßa Recoil l√† ƒë∆°n gi·∫£n h√≥a vi·ªác chia s·∫ª state gi·ªØa c√°c component, h·ªó tr·ª£ t·ªët cho c√°c ·ª©ng d·ª•ng React c√≥ c·∫•u tr√∫c ph·ª©c t·∫°p.

> Recoil ho·∫°t ƒë·ªông nh∆∞ m·ªôt **state management** solution nh∆∞ng g·∫ßn g≈©i v·ªõi c√∫ ph√°p v√† t∆∞ duy c·ªßa React h∆°n.

---

## üöÄ ∆Øu ƒëi·ªÉm c·ªßa Recoil

- Ho·∫°t ƒë·ªông li·ªÅn m·∫°ch v·ªõi React hooks (`useRecoilState`, `useRecoilValue`,...).
- H·ªó tr·ª£ **Derived State** v√† **Asynchronous State** (t∆∞∆°ng t·ª± nh∆∞ computed v√† async trong Vue).
- D·ªÖ d√†ng **code splitting** v√† **server-side rendering**.
- Kh√¥ng c·∫ßn vi·∫øt reducer nh∆∞ Redux.
- C√≥ th·ªÉ d√πng selector ƒë·ªÉ t·∫°o gi√° tr·ªã ph√°i sinh t·ª´ nhi·ªÅu atom.

---

## ‚öôÔ∏è C√†i ƒë·∫∑t

```bash
npm install recoil
import { atom } from 'recoil';

export const counterState = atom({
  key: 'counterState', // unique ID
  default: 0,          // gi√° tr·ªã m·∫∑c ƒë·ªãnh
});
import { selector } from 'recoil';
import { counterState } from './atoms';

export const doubledCounter = selector({
  key: 'doubledCounter',
  get: ({ get }) => get(counterState) * 2,
});
import React from 'react';
import { useRecoilState, useRecoilValue } from 'recoil';
import { counterState, doubledCounter } from './state';

const Counter = () => {
  const [count, setCount] = useRecoilState(counterState);
  const double = useRecoilValue(doubledCounter);

  return (
    <div>
      <p>Count: {count}</p>
      <p>Doubled: {double}</p>
      <button onClick={() => setCount(count + 1)}>TƒÉng</button>
    </div>
  );
};
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { RecoilRoot } from 'recoil';

ReactDOM.render(
  <RecoilRoot>
    <App />
  </RecoilRoot>,
  document.getElementById('root')
);
---

## ‚è≥ Async Selector trong Recoil

Recoil h·ªó tr·ª£ selector b·∫•t ƒë·ªìng b·ªô (async selector), cho ph√©p b·∫°n l·∫•y d·ªØ li·ªáu t·ª´ API ho·∫∑c th·ª±c hi·ªán c√°c thao t√°c async nh∆∞ fetch, delay, v.v.

### üß† T√¨nh hu·ªëng s·ª≠ d·ª•ng

V√≠ d·ª•: b·∫°n mu·ªën l·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ m·ªôt API v√† s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√≥ trong component.

---

### üîß B∆∞·ªõc 1: T·∫°o async selector

```js
import { selector } from 'recoil';

export const userListSelector = selector({
  key: 'userListSelector',
  get: async () => {
    const response = await fetch('https://jsonplaceholder.typicode.com/users');
    if (!response.ok) {
      throw new Error('Failed to fetch users');
    }
    const data = await response.json();
    return data;
  },
});
import React from 'react';
import { useRecoilValueLoadable } from 'recoil';
import { userListSelector } from './state';

const UserList = () => {
  const usersLoadable = useRecoilValueLoadable(userListSelector);

  if (usersLoadable.state === 'loading') {
    return <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  }

  if (usersLoadable.state === 'hasError') {
    return <div>L·ªói khi t·∫£i d·ªØ li·ªáu.</div>;
  }

  return (
    <ul>
      {usersLoadable.contents.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};
